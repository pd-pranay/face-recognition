// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const create = `-- name: Create :one
INSERT INTO users (name, college_name, address, mobile_no, image_path, image_uid) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name, college_name, address, mobile_no, image_uid
`

type CreateParams struct {
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

type CreateRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) Create(ctx context.Context, arg CreateParams) (CreateRow, error) {
	row := q.queryRow(ctx, q.createStmt, create,
		arg.Name,
		arg.CollegeName,
		arg.Address,
		arg.MobileNo,
		arg.ImagePath,
		arg.ImageUid,
	)
	var i CreateRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CollegeName,
		&i.Address,
		&i.MobileNo,
		&i.ImageUid,
	)
	return i, err
}

const readAll = `-- name: ReadAll :many
SELECT id, name, college_name, address, mobile_no, image_path, image_uid FROM users WHERE is_deleted = false
`

type ReadAllRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) ReadAll(ctx context.Context) ([]ReadAllRow, error) {
	rows, err := q.query(ctx, q.readAllStmt, readAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllRow
	for rows.Next() {
		var i ReadAllRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CollegeName,
			&i.Address,
			&i.MobileNo,
			&i.ImagePath,
			&i.ImageUid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readByID = `-- name: ReadByID :one
SELECT id, name, college_name, address, mobile_no, image_path, image_uid FROM users WHERE is_deleted = false AND image_uid = ($1)
`

type ReadByIDRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) ReadByID(ctx context.Context, imageUid string) (ReadByIDRow, error) {
	row := q.queryRow(ctx, q.readByIDStmt, readByID, imageUid)
	var i ReadByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CollegeName,
		&i.Address,
		&i.MobileNo,
		&i.ImagePath,
		&i.ImageUid,
	)
	return i, err
}

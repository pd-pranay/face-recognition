// Code generated by sqlc. DO NOT EDIT.
// source: admin.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admin (name, email, password) VALUES ($1, $2, $3) RETURNING id, name, email
`

type CreateAdminParams struct {
	Name     string `json:"name"`
	Email    string `json:"email"`
	Password string `json:"password"`
}

type CreateAdminRow struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.queryRow(ctx, q.createAdminStmt, createAdmin, arg.Name, arg.Email, arg.Password)
	var i CreateAdminRow
	err := row.Scan(&i.ID, &i.Name, &i.Email)
	return i, err
}

const listAllAdmin = `-- name: ListAllAdmin :many
SELECT id, name, email FROM admin
`

type ListAllAdminRow struct {
	ID    uuid.UUID `json:"id"`
	Name  string    `json:"name"`
	Email string    `json:"email"`
}

func (q *Queries) ListAllAdmin(ctx context.Context) ([]ListAllAdminRow, error) {
	rows, err := q.query(ctx, q.listAllAdminStmt, listAllAdmin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllAdminRow
	for rows.Next() {
		var i ListAllAdminRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Email); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const login = `-- name: Login :one
SELECT id, name, email, password FROM admin WHERE email = ($1)
`

type LoginRow struct {
	ID       uuid.UUID `json:"id"`
	Name     string    `json:"name"`
	Email    string    `json:"email"`
	Password string    `json:"password"`
}

func (q *Queries) Login(ctx context.Context, email string) (LoginRow, error) {
	row := q.queryRow(ctx, q.loginStmt, login, email)
	var i LoginRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
	)
	return i, err
}

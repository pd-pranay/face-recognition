// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, college_name, address, mobile_no, image_path, image_uid) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, name, college_name, address, mobile_no, image_uid
`

type CreateUserParams struct {
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

type CreateUserRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.Name,
		arg.CollegeName,
		arg.Address,
		arg.MobileNo,
		arg.ImagePath,
		arg.ImageUid,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CollegeName,
		&i.Address,
		&i.MobileNo,
		&i.ImageUid,
	)
	return i, err
}

const readAllUsers = `-- name: ReadAllUsers :many
SELECT id, name, college_name, address, mobile_no, image_path, image_uid FROM users WHERE is_deleted = false
`

type ReadAllUsersRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) ReadAllUsers(ctx context.Context) ([]ReadAllUsersRow, error) {
	rows, err := q.query(ctx, q.readAllUsersStmt, readAllUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadAllUsersRow
	for rows.Next() {
		var i ReadAllUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CollegeName,
			&i.Address,
			&i.MobileNo,
			&i.ImagePath,
			&i.ImageUid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const readUserByID = `-- name: ReadUserByID :one
SELECT id, name, college_name, address, mobile_no, image_path, image_uid FROM users WHERE is_deleted = false AND id = ($1)
`

type ReadUserByIDRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) ReadUserByID(ctx context.Context, id uuid.UUID) (ReadUserByIDRow, error) {
	row := q.queryRow(ctx, q.readUserByIDStmt, readUserByID, id)
	var i ReadUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CollegeName,
		&i.Address,
		&i.MobileNo,
		&i.ImagePath,
		&i.ImageUid,
	)
	return i, err
}

const readUsersByFace = `-- name: ReadUsersByFace :many
SELECT id, name, college_name, address, mobile_no, image_path, image_uid FROM users WHERE is_deleted = false AND image_uid IN ($1)
`

type ReadUsersByFaceRow struct {
	ID          uuid.UUID      `json:"id"`
	Name        sql.NullString `json:"name"`
	CollegeName sql.NullString `json:"college_name"`
	Address     sql.NullString `json:"address"`
	MobileNo    sql.NullInt32  `json:"mobile_no"`
	ImagePath   string         `json:"image_path"`
	ImageUid    string         `json:"image_uid"`
}

func (q *Queries) ReadUsersByFace(ctx context.Context, imageUid string) ([]ReadUsersByFaceRow, error) {
	rows, err := q.query(ctx, q.readUsersByFaceStmt, readUsersByFace, imageUid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ReadUsersByFaceRow
	for rows.Next() {
		var i ReadUsersByFaceRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CollegeName,
			&i.Address,
			&i.MobileNo,
			&i.ImagePath,
			&i.ImageUid,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserFlush = `-- name: UpdateUserFlush :one
UPDATE users SET is_deleted = true WHERE id = $1 RETURNING id, index, name, college_name, address, mobile_no, image_path, image_uid, is_deleted, created_at, updated_at
`

func (q *Queries) UpdateUserFlush(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.updateUserFlushStmt, updateUserFlush, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Index,
		&i.Name,
		&i.CollegeName,
		&i.Address,
		&i.MobileNo,
		&i.ImagePath,
		&i.ImageUid,
		&i.IsDeleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
